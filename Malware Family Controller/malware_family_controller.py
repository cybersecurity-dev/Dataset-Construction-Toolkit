import hashlib
import requests
import os
import csv
import sys
import time

def get_file_hash(file_path):
    """Calculate the SHA-256 hash of the file."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def get_malware_family_virustotal(api_key, file_hash):
    """Query VirusTotal API to get all family labels of the file."""
    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {
        "x-apikey": api_key
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        json_response = response.json()
        if "data" in json_response and "attributes" in json_response["data"]:
            attributes = json_response["data"]["attributes"]
            if "popular_threat_classification" in attributes:
                threat_classification = attributes["popular_threat_classification"]

                #Popular threat label
                popular_threat_label = str(threat_classification.get("suggested_threat_label"))
                
                #Threat categories
                popular_threat_category_value_count = threat_classification.get("popular_threat_category")
                popular_threat_category_value_list= [d['value'] for d in popular_threat_category_value_count]
                popular_threat_category_count_list = [d['count'] for d in popular_threat_category_value_count]
                
                popular_threat_category_index = popular_threat_category_count_list.index(max(popular_threat_category_count_list))
                popular_threat_category = popular_threat_category_value_list[popular_threat_category_index]
                popular_threat_category_count = popular_threat_category_count_list[popular_threat_category_index]

                #Family labels
                popular_threat_name_value_count = threat_classification.get("popular_threat_name")
                popular_threat_name_value_list= [d['value'] for d in popular_threat_name_value_count]
                popular_threat_name_count_list = [d['count'] for d in popular_threat_name_value_count]
                family_labels = ', '.join(popular_threat_name_value_list)

                return popular_threat_label, popular_threat_category, family_labels
    return None, None, None

def get_malware_family_malwarebazaar(api_key, file_hash):
    """Query MalwareBazaar API to get the malware family of the file."""
    url = "https://mb-api.abuse.ch/api/v1/"
    headers = {
        "API-KEY": api_key
    }
    data = {
        "query": "get_info",
        "hash": file_hash
    }
    response = requests.post(url, headers=headers, data=data)
    if response.status_code == 200:
        json_response = response.json()
        if json_response.get("query_status") == "ok":
            return json_response.get("data")[0].get("signature")
    return None

def process_directory(virustotal_api_key, malwarebazaar_api_key, directory_path, output_csv):
    """Process all binaries in a directory and save the results in a CSV file."""
    with open(output_csv, mode='w', newline='') as csv_file:
        fieldnames = ['file_name', 'file_hash', 'virustotal_popular_threat_label', 'virustotal_threat_category', 'virustotal_family_labels', 'malwarebazaar_malware_family']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        writer.writeheader()

        for root, dirs, files in os.walk(directory_path):
            for file in files:
                file_path = os.path.join(root, file)
                try:
                    file_hash = get_file_hash(file_path)
                    vt_popular_threat_label, vt_popular_threat_category, vt_family_labels = get_malware_family_virustotal(virustotal_api_key, file_hash)
                    malwarebazaar_malware_family = get_malware_family_malwarebazaar(malwarebazaar_api_key, file_hash)
                    writer.writerow({
                        'file_name': file,
                        'file_hash': file_hash,
                        'virustotal_popular_threat_label': vt_popular_threat_label,
                        'virustotal_threat_category': vt_popular_threat_category,
                        'virustotal_family_labels': vt_family_labels,
                        'malwarebazaar_malware_family': malwarebazaar_malware_family
                    })
                except FileNotFoundError:
                    print(f"File not found: {file_path}")

def main(virustotal_api_key, malwarebazaar_api_key, directory_path, output_csv):    
    process_directory(virustotal_api_key, malwarebazaar_api_key, directory_path, output_csv)

if __name__ == "__main__":
    print("\n----------------------------------\n")
    print("[" + __file__ + "]'s last modified: %s" % time.ctime(os.path.getmtime(__file__)))
    print("\n----------------------------------\n")
    # Check if a parameter is provided
    if len(sys.argv) == 5 :
        dir_binary = sys.argv[1]
        print(f"Download Directory:\t{dir_binary}")
    
        file_output = sys.argv[2]
        print(f"Extract Directory:\t{file_output}")

        virustotal_api_key = sys.argv[3]
        print(f"Virustotal API KEY:\t{virustotal_api_key}")

        malwarebazaar_api_key = sys.argv[4]
        print(f"Malwarebazaar API KEY:\t{malwarebazaar_api_key}")
        main(virustotal_api_key, malwarebazaar_api_key, dir_binary, file_output)
    else:
        print("python3" + __file__ + "<input directory> <output_csv> <VT API KEY> <Malwarebazaar API KEY>")